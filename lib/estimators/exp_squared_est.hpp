// Copyright 2024 Daniel Beale CC BY-NC-SA 4.0
#ifndef LIB_ESTIMATORS_EXP_SQUARED_EST_HPP_
#define LIB_ESTIMATORS_EXP_SQUARED_EST_HPP_

#include <cmath>

#include "functions/exp_squared.hpp"
#include "functions/exp_inner.hpp"
#include "math/taylor.hpp"
#include "math/polynomial.hpp"

namespace gs {
template<typename T, size_t M, size_t D>
requires std::is_floating_point<T>::value
/**
 * \brief An estimate of the exp_squared function.
 * 
 * The estimator produces an exact estimate of exp_squared given a
 * pair of inputs to the call operator, and can be used to approximate
 * vector dot product between an arbitrary vector and one generated
 * by exp_squared, against a particular point.
 */
class exp_squared_est  {
    exp_squared<T, M, 0> m_exp_squared;   ///< The exp_squared function
    exp_inner<T, M, D> m_exp_inner;       ///< The exp inner product estimate
    taylor<T, M, D, exp_inner> m_taylor;  ///< The taylor estimate

 public:
    explicit exp_squared_est(const T sigma):
        m_exp_squared(sigma),
        m_exp_inner(sigma),
        m_taylor(m_exp_inner) {}

    /**
     * \brief Compute the exact value using the estimator
     */
    T operator()(const gs::vector<T, M>& a, const gs::vector<T, M>& b) const {
        return m_exp_squared(a, b);
    }

    /**
     * \brief Estimate an approximation of the exp_squared function
     * using Taylor and a polynomial of coefficients.
     * 
     * The polynomial input is pre-computed and approximates a potentially
     * large vector, which is generated by exp_squared, about an appropriate
     * center. Given these two parameters and an arbitrary vector y, the 
     * approximate dot product is returned. The accuracy is determined by the
     * template parameter D, but should be small (~2) to remain sufficiently
     * efficient.
     */
    T estimate(
        const polynomial<T, M, D>& poly,
        const gs::vector<T, M>& center,
        const gs::vector<T, M>& y
    ) const {
        return m_taylor.estimate(poly, gs::vector<T, M>(), y-center);
    }

    template<size_t K>
    /**
     * \brief Compute the polynomial coefficients for estimation
     * using Taylor.
     * 
     * The estimation is an estimate of the sum over each of the input
     * vectors, multiplied by an arbitrary vector of values. It 
     * is essentially an estimate of the dot product of the vector generated
     * by the function and the values.
     */
    polynomial<T, M, D> compute_coefs(
        std::array<gs::vector<T, M>, K> vectorVals,
        const gs::vector<T, M>& center,
        std::array<T, K> tVals
    ) const {
        polynomial<T, M, D> poly;
        for ( size_t i = 0; i < K; ++i ) {
            tVals[i] *= operator()(vectorVals[i], center);
            vectorVals[i] -= center;
        }
        poly.fill(vectorVals, tVals);
        return poly;
    }
};
}  // namespace gs

#endif  // LIB_ESTIMATORS_EXP_SQUARED_EST_HPP_
